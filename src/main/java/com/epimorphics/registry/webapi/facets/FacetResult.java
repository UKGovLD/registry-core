/******************************************************************
 * File:        FacetResult.java
 * Created by:  Dave Reynolds
 * Created on:  13 Jun 2012
 *
 * (c) Copyright 2012, Epimorphics Limited
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *****************************************************************/

package com.epimorphics.registry.webapi.facets;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.jena.query.QueryExecution;
import org.apache.jena.query.QueryExecutionFactory;
import org.apache.jena.query.QuerySolution;
import org.apache.jena.query.ResultSet;
import org.apache.jena.rdf.model.Model;
import org.apache.jena.rdf.model.RDFNode;

/**
 * Represents a faceted search result. Only useful for result sets that fit in memory.
 * The facets are generated by looking in the data for values of properties that are marked
 * by a suitable UI marker class. Only works at model (not dataset) level.
 *
 * @author <a href="mailto:dave@epimorphics.com">Dave Reynolds</a>
 */
public class FacetResult {

    public static final int DEFAULT_PAGESIZE = 40;
    String baseQuery;

    FacetState state;
    Map<String, Facet> facets = new HashMap<>();
    List<Facet> facetList = new ArrayList<>();
    int pageSize = DEFAULT_PAGESIZE;

    List<FacetResultEntry> filteredResults;

    static Logger log = LoggerFactory.getLogger(FacetResult.class);

    /**
     * Create and run the search.
     *
     * @param query  graphpattern part of the query query which will bind ?item to the desired matching resource
     * @param state  serialized facet search state
     * @param specList  base resources whose facet:facet values define the facets to be used
     * @param model  the model to be queried, should be suitably locked until the constructor has finished the query
     */
    public FacetResult(String query, String state, List<FacetSpec> specList, String lang, Model model) {
        this.baseQuery = query;
        this.state = new FacetState( specList );
        this.state.setState(state);
        initFacets(model, lang);
        facetCounts(model);
    }

    protected void initFacets(Model model, String lang) {
        for (FacetSpec fs : getFacetSpecs()) {
            Facet facet = new Facet(fs, lang);
            if (fs.isSet()) {
                facet.setFixedValue( fs.getValue().inModel(model) );
            }
            facets.put(fs.getVarname(), facet);
            facetList.add( facet );
        }
    }

    protected void facetCounts(Model model) {
        String query = state.expandQuery(baseQuery);
        log.debug("Facet query: " + query);

        List<Map<String, RDFNode>> results = new ArrayList<>();
        QueryExecution qexec = QueryExecutionFactory.create(query, model);
        try {
            ResultSet rs = qexec.execSelect();
            while (rs.hasNext()) {
                Map<String, RDFNode> result = new HashMap<>();
                QuerySolution soln = rs.nextSolution();
                Iterator<String> names = soln.varNames();
                while (names.hasNext()) {
                    String varname = names.next();
                    RDFNode value = soln.get(varname);
                    result.put(varname, value);
                }
                results.add(result);
            }
        } finally {
            qexec.close();
        }

        filteredResults = new ArrayList<>(results.size());
        Map<RDFNode, FacetResultEntry> index = new HashMap<>();
        List<FacetSpec> facetSpecs = getFacetSpecs();

        for (Map<String, RDFNode> result : results) {
            RDFNode item = result.get(FacetResultEntry.ITEM_VAR);
            if (index.containsKey(item)) {
                index.get(item).mergeResult(result);
            } else {
                FacetResultEntry entry = new FacetResultEntry(result);
                index.put(item, entry);
                filteredResults.add( entry );
            }
        }

        for ( FacetResultEntry entry : index.values() ) {
            for (FacetSpec fs : facetSpecs) {
                Set<RDFNode> vals = entry.getMetadata().get( fs.getVarname() );
                if (vals != null) {
                    for (RDFNode val : vals ) {
                        if (val != null) {
                            String fname = fs.getVarname();
                            Facet facet = facets.get( fname );
                            facet.inc( val);
                        }
                    }
                }
            }
        }
    }

    /**
     * Return all the results after the current facet filter has been applied. Each entry is a map
     * whose "item" value will be the result itself and the other values will correspond to facet
     * variable names. There will only be one entry for each item, with the other values merged.
     */
    public List<FacetResultEntry> getAllResults() {
        return filteredResults;
    }

    /**
     * Return the results after the current facet filter has been applied. Each entry is a map
     * whose "item" value will be the result itself and the other values will correspond to facet
     * variable names. There will only be one entry for each item, with the other values merged.
     */
    public List<FacetResultEntry> getResultsPage(int pagenum) {
        List<FacetResultEntry> page = new ArrayList<>(pageSize);
        int offset = pagenum * pageSize;
        for (int i = 0; i < pageSize; i++) {
            int n = offset + i;
            if (n >= filteredResults.size()) break;
            page.add( filteredResults.get(n) );
        }
        return page;
    }

    public int numberOfPages() {
        return 1 + filteredResults.size() / pageSize;
    }

    public void setPageSize(int ps) {
        pageSize = ps;
    }

    /**
     * Return the list of facet specifications, ordered by name
     */
    public List<FacetSpec> getFacetSpecs() {
        return state.getFacetSpecs();
    }

    /**
     * Return the facet specification with the given name
     */
    public FacetSpec getFacetSpec(String name) {
        return state.getFacetSpec(name);
    }

    /**
     * Return the list facets discovered, ordered by localname of the facet property name
     */
    public List<Facet> getFacets() {
        return facetList;
    }


    /**
     * Serialize the state of facet selection.
     * Fragile assumes states don't have '=' or '|' characters.
     */
    public String serialize() {
        return state.serialize();
    }

    /**
     * Seralize the state of facet selection with the addition of the given facet value
     */
    public String serializeWith(String add, RDFNode value) {
        return state.serializeWith(add, value);
    }

    /**
     * Seralize the state of facet selection with the omission of
     * the named facet
     */
    public String serializeWithout(String omit) {
        return state.serializeWithout(omit);
    }

    /**
     * Locate the facet corresponding to the given variable name
     */
    public Facet facetForVar(String varname) {
        for (Facet facet : facets.values()) {
            if (facet.getVarname().equals(varname)) {
                return facet;
            }
        }
        return null;
    }

}
